import hashlib
import requests

from urlparse import urlparse
from urlparse import urlunparse


def sanitize_url(url):
    uri = urlparse(url, scheme="http", allow_fragments=False)
    url = uri.scheme + "://" + uri.netloc + uri.path
    if "#" in url:
        url = url.rsplit("#")[0]
    return url

def get_url_hash(url):
    if not url:
        raise Exception("URL can not be empty for URL Hashing")
    url = sanitize_url(url)
    return hashlib.sha224(url).hexdigest()

def domainOf(url):
    url = sanitize_url(url)
    urlParseResult = urlparse(url)
    return urlParseResult.netloc


def checkWebsiteReturns200(url):
    return (1,200)
    url = sanitize_url(url)
    r = requests.get(url)
    return (r.status_code==200, r.status_code)


def getOutgoingAnchorLinks(browser):
    """
    `browser` is a selenium.webdriver instance.
    """
    outgoing_links = browser.find_elements_by_tag_name("a")
    outgoing_links = [elem.get_attribute("href") for elem in outgoing_links]
    outgoing_links = [sanitize_url(elem) for elem in outgoing_links if elem]
    outgoing_links = [elem for elem in outgoing_links if isURLValid(elem)]
    return outgoing_links

def getOutgoingJSLinks(browser):
    outgoing_links = browser.find_elements_by_tag_name("script")
    outgoing_links = [elem.get_attribute("src") for elem in outgoing_links]
    outgoing_links = [sanitize_url(elem) for elem in outgoing_links if elem]
    outgoing_links = [elem for elem in outgoing_links if isURLValid(elem)]
    return outgoing_links


def get_status_code(url):
    try:
        r = requests.get(url)
    except Exception:
        return 404
    return r.status_code

def getGeoLocation(ip):
    try:
        r = requests.get("http://api.hostip.info/get_json.php?ip=%s"%(ip))
    except Exception, e:
        return {}
    return r.json()

def isURLValid(url):
    if "http://" in url or "https:\\" in url:
        return True
    return False
